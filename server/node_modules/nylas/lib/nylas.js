"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var request_1 = __importDefault(require("request"));
var config = __importStar(require("./config"));
var nylas_connection_1 = __importDefault(require("./nylas-connection"));
var management_account_1 = __importDefault(require("./models/management-account"));
var account_1 = __importDefault(require("./models/account"));
var connect_1 = __importDefault(require("./models/connect"));
var restful_model_collection_1 = __importDefault(require("./models/restful-model-collection"));
var management_model_collection_1 = __importDefault(require("./models/management-model-collection"));
var webhook_1 = __importDefault(require("./models/webhook"));
var Nylas = /** @class */ (function () {
    function Nylas() {
    }
    Object.defineProperty(Nylas, "clientSecret", {
        get: function () {
            return config.clientSecret;
        },
        set: function (newClientSecret) {
            config.setClientSecret(newClientSecret);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Nylas, "apiServer", {
        get: function () {
            return config.apiServer;
        },
        set: function (newApiServer) {
            config.setApiServer(newApiServer);
        },
        enumerable: true,
        configurable: true
    });
    Nylas.config = function (_a) {
        var clientId = _a.clientId, clientSecret = _a.clientSecret, apiServer = _a.apiServer;
        if (apiServer && apiServer.indexOf('://') === -1) {
            throw new Error('Please specify a fully qualified URL for the API Server.');
        }
        if (clientId) {
            this.clientId = clientId;
        }
        if (clientSecret) {
            this.clientSecret = clientSecret;
        }
        if (apiServer) {
            this.apiServer = apiServer;
        }
        else {
            this.apiServer = 'https://api.nylas.com';
        }
        var conn = new nylas_connection_1.default(this.clientSecret, {
            clientId: this.clientId,
        });
        this.connect = new connect_1.default(conn, this.clientId, this.clientSecret);
        this.webhooks = new management_model_collection_1.default(webhook_1.default, conn, this.clientId);
        if (this.clientCredentials()) {
            this.accounts = new management_model_collection_1.default(management_account_1.default, conn, this.clientId);
        }
        else {
            this.accounts = new restful_model_collection_1.default(account_1.default, conn);
        }
        return this;
    };
    Nylas.clientCredentials = function () {
        return this.clientId != null && this.clientSecret != null;
    };
    Nylas.with = function (accessToken) {
        if (!accessToken) {
            throw new Error('This function requires an access token');
        }
        return new nylas_connection_1.default(accessToken, { clientId: this.clientId });
    };
    Nylas.application = function (options) {
        if (!this.clientId) {
            throw new Error('This function requires a clientId');
        }
        if (!this.clientSecret) {
            throw new Error('This function requires a clientSecret');
        }
        var connection = new nylas_connection_1.default(null, { clientId: this.clientId });
        var requestOptions = {
            path: "/a/" + this.clientId,
        };
        if (options) {
            requestOptions.body = {
                application_name: options.applicationName || options.application_name,
                redirect_uris: options.redirectUris || options.redirect_uris,
            };
            requestOptions.method = 'PUT';
        }
        return connection.request(requestOptions);
    };
    Nylas.exchangeCodeForToken = function (code, callback) {
        var _this = this;
        if (!this.clientId || !this.clientSecret) {
            throw new Error('exchangeCodeForToken() cannot be called until you provide a clientId and secret via config()');
        }
        if (!code) {
            throw new Error('exchangeCodeForToken() must be called with a code');
        }
        return new Promise(function (resolve, reject) {
            var options = {
                method: 'GET',
                json: true,
                url: _this.apiServer + "/oauth/token",
                qs: {
                    client_id: _this.clientId,
                    client_secret: _this.clientSecret,
                    grant_type: 'authorization_code',
                    code: code,
                },
            };
            return request_1.default(options, function (error, response, body) {
                if (!body || !body['access_token']) {
                    var errorMessage = 'No access token in response';
                    if (body && body.message)
                        errorMessage = body.message;
                    error = error ? error : new Error(errorMessage);
                }
                if (error) {
                    reject(error);
                    if (callback) {
                        return callback(error);
                    }
                }
                else {
                    resolve(body['access_token']);
                    if (callback) {
                        return callback(null, body['access_token']);
                    }
                }
            });
        });
    };
    Nylas.urlForAuthentication = function (options) {
        if (options === void 0) { options = {}; }
        if (!this.clientId) {
            throw new Error('urlForAuthentication() cannot be called until you provide a clientId via config()');
        }
        if (!options.redirectURI) {
            throw new Error('urlForAuthentication() requires options.redirectURI');
        }
        if (!options.loginHint) {
            options.loginHint = '';
        }
        var url = this.apiServer + "/oauth/authorize?client_id=" + this.clientId + "&response_type=code&login_hint=" + options.loginHint + "&redirect_uri=" + options.redirectURI;
        if (options.state != null) {
            url += "&state=" + options.state;
        }
        if (options.scopes != null) {
            url += "&scopes=" + options.scopes.join(',');
        }
        return url;
    };
    Nylas.clientId = '';
    return Nylas;
}());
module.exports = Nylas;
