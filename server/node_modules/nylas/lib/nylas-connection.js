"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var request_1 = __importDefault(require("request"));
var config = __importStar(require("./config"));
var restful_model_collection_1 = __importDefault(require("./models/restful-model-collection"));
var calendar_restful_model_collection_1 = __importDefault(require("./models/calendar-restful-model-collection"));
var contact_restful_model_collection_1 = __importDefault(require("./models/contact-restful-model-collection"));
var restful_model_instance_1 = __importDefault(require("./models/restful-model-instance"));
var account_1 = __importDefault(require("./models/account"));
var thread_1 = __importDefault(require("./models/thread"));
var message_1 = __importDefault(require("./models/message"));
var draft_1 = __importDefault(require("./models/draft"));
var file_1 = __importDefault(require("./models/file"));
var event_1 = __importDefault(require("./models/event"));
var job_status_1 = __importDefault(require("./models/job-status"));
var resource_1 = __importDefault(require("./models/resource"));
var delta_1 = __importDefault(require("./models/delta"));
var folder_1 = require("./models/folder");
var PACKAGE_JSON = require('../package.json');
var SDK_VERSION = PACKAGE_JSON.version;
var SUPPORTED_API_VERSION = '2.1';
var NylasConnection = /** @class */ (function () {
    function NylasConnection(accessToken, _a) {
        var clientId = _a.clientId;
        this.threads = new restful_model_collection_1.default(thread_1.default, this);
        this.contacts = new contact_restful_model_collection_1.default(this);
        this.messages = new restful_model_collection_1.default(message_1.default, this);
        this.drafts = new restful_model_collection_1.default(draft_1.default, this);
        this.files = new restful_model_collection_1.default(file_1.default, this);
        this.calendars = new calendar_restful_model_collection_1.default(this);
        this.jobStatuses = new restful_model_collection_1.default(job_status_1.default, this);
        this.events = new restful_model_collection_1.default(event_1.default, this);
        this.resources = new restful_model_collection_1.default(resource_1.default, this);
        this.deltas = new delta_1.default(this);
        this.labels = new restful_model_collection_1.default(folder_1.Label, this);
        this.folders = new restful_model_collection_1.default(folder_1.Folder, this);
        this.account = new restful_model_instance_1.default(account_1.default, this);
        this.accessToken = accessToken;
        this.clientId = clientId;
    }
    NylasConnection.prototype.requestOptions = function (options) {
        if (!options) {
            options = {};
        }
        options = __assign({}, options);
        if (!options.method) {
            options.method = 'GET';
        }
        if (options.path) {
            if (!options.url) {
                options.url = "" + config.apiServer + options.path;
            }
        }
        if (!options.formData) {
            if (!options.body) {
                options.body = {};
            }
        }
        if (options.json == null) {
            options.json = true;
        }
        if (!options.downloadRequest) {
            options.downloadRequest = false;
        }
        // For convenience, If `expanded` param is provided, convert to view:
        // 'expanded' api option
        if (options.qs && options.qs.expanded) {
            if (options.qs.expanded === true) {
                options.qs.view = 'expanded';
            }
            delete options.qs.expanded;
        }
        var user = options.path.substr(0, 3) === '/a/'
            ? config.clientSecret
            : this.accessToken;
        if (user) {
            options.auth = {
                user: user,
                pass: '',
                sendImmediately: true,
            };
        }
        if (options.headers == null) {
            options.headers = {};
        }
        if (options.headers['User-Agent'] == null) {
            options.headers['User-Agent'] = "Nylas Node SDK v" + SDK_VERSION;
        }
        options.headers['Nylas-API-Version'] = SUPPORTED_API_VERSION;
        options.headers['Nylas-SDK-API-Version'] = SUPPORTED_API_VERSION;
        options.headers['X-Nylas-Client-Id'] = this.clientId;
        return options;
    };
    NylasConnection.prototype._getWarningForVersion = function (sdkApiVersion, apiVersion) {
        var warning = '';
        if (sdkApiVersion != apiVersion) {
            if (sdkApiVersion && apiVersion) {
                warning +=
                    "WARNING: SDK version may not support your Nylas API version." +
                        (" SDK supports version " + sdkApiVersion + " of the API and your application") +
                        (" is currently running on version " + apiVersion + " of the API.");
                var apiNum = parseInt(apiVersion.split('-')[0]);
                var sdkNum = parseInt(sdkApiVersion.split('-')[0]);
                if (sdkNum > apiNum) {
                    warning += " Please update the version of the API that your application is using through the developer dashboard.";
                }
                else if (apiNum > sdkNum) {
                    warning += " Please update the sdk to ensure it works properly.";
                }
            }
        }
        return warning;
    };
    NylasConnection.prototype.request = function (options) {
        var _this = this;
        if (!options) {
            options = {};
        }
        var resolvedOptions = this.requestOptions(options);
        return new Promise(function (resolve, reject) {
            return request_1.default(resolvedOptions, function (error, response, body) {
                if (body === void 0) { body = {}; }
                if (typeof response === 'undefined') {
                    error = error || new Error('No response');
                    return reject(error);
                }
                // node headers are lowercase so this refers to `Nylas-Api-Version`
                var apiVersion = response.headers['nylas-api-version'];
                var warning = _this._getWarningForVersion(SUPPORTED_API_VERSION, apiVersion);
                if (warning) {
                    console.warn(warning);
                }
                // raw MIMI emails have json === false and the body is a string so
                // we need to turn into JSON before we can access fields
                if (resolvedOptions.json === false) {
                    body = JSON.parse(body);
                }
                if (error || response.statusCode > 299) {
                    if (!error) {
                        error = new Error(body.message);
                    }
                    if (body.missing_fields) {
                        error.message = body.message + ": " + body.missing_fields;
                    }
                    if (body.server_error) {
                        error.message = error.message + " (Server Error:\n              " + body.server_error + "\n            )";
                    }
                    if (response.statusCode) {
                        error.statusCode = response.statusCode;
                    }
                    return reject(error);
                }
                else {
                    if (resolvedOptions.downloadRequest) {
                        return resolve(response);
                    }
                    else {
                        return resolve(body);
                    }
                }
            });
        });
    };
    return NylasConnection;
}());
exports.default = NylasConnection;
