/// <reference types="node" />
import backoff from 'backoff';
import request, { ResponseRequest } from 'request';
import { EventEmitter } from 'events';
import NylasConnection from '../nylas-connection';
declare type CreateRequestType = typeof request;
export default class Delta {
    connection: NylasConnection;
    static streamingTimeoutMs: number;
    constructor(connection: NylasConnection);
    latestCursor(callback: (error: Error | null, cursor: string | null) => void): Promise<any>;
    startStream(cursor: string, params?: {
        [key: string]: any;
    }): DeltaStream;
    _startStream(createRequest: CreateRequestType, cursor: string, params: {
        [key: string]: any;
    }): DeltaStream;
}
declare class DeltaStream extends EventEmitter {
    static MAX_RESTART_RETRIES: number;
    createRequest: CreateRequestType;
    connection: NylasConnection;
    cursor?: string;
    params: {
        includeTypes?: string[];
        excludeTypes?: string[];
        expanded?: boolean;
    };
    request?: ResponseRequest;
    restartBackoff: backoff.Backoff;
    timeoutId?: number;
    constructor(createRequest: CreateRequestType, connection: NylasConnection, cursor: string, params?: {
        [key: string]: any;
    });
    close(): void;
    open(): request.Request;
    _onDataReceived(data?: any): void;
    _onError(err: Error): void;
    _restartConnection(n: number): request.Request;
}
export {};
