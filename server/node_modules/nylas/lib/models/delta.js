"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var backoff_1 = __importDefault(require("backoff"));
var JSONStream_1 = __importDefault(require("JSONStream"));
var request_1 = __importDefault(require("request"));
var events_1 = require("events");
var nylas_connection_1 = __importDefault(require("../nylas-connection"));
var Delta = /** @class */ (function () {
    function Delta(connection) {
        this.connection = connection;
        if (!(this.connection instanceof nylas_connection_1.default)) {
            throw new Error('Connection object not provided');
        }
    }
    Delta.prototype.latestCursor = function (callback) {
        var reqOpts = {
            method: 'POST',
            path: '/delta/latest_cursor',
        };
        return this.connection
            .request(reqOpts)
            .then(function (response) {
            var cursor = response.cursor;
            if (callback) {
                callback(null, cursor);
            }
            return Promise.resolve(cursor);
        })
            .catch(function (err) {
            if (callback) {
                callback(err, null);
            }
            return Promise.reject(err);
        });
    };
    Delta.prototype.startStream = function (cursor, params) {
        if (params === void 0) { params = {}; }
        return this._startStream(request_1.default, cursor, params);
    };
    Delta.prototype._startStream = function (createRequest, cursor, params) {
        var stream = new DeltaStream(createRequest, this.connection, cursor, params);
        stream.open();
        return stream;
    };
    Delta.streamingTimeoutMs = 15000;
    return Delta;
}());
exports.default = Delta;
/*
A connection to the Nylas delta streaming API.

Emits the following events:
- `response` when the connection is established, with one argument, a `http.IncomingMessage`
- `delta` for each delta received
- `error` when an error occurs in the connection
- `info` when the connection status changes
*/
var DeltaStream = /** @class */ (function (_super) {
    __extends(DeltaStream, _super);
    // @param {function} createRequest function to create a request; only present for testability
    // @param {string} cursor Nylas delta API cursor
    // @param {Object} params object contianing query string params to be passed to  the request
    // @param {Array<string>} params.excludeTypes object types to not return deltas for (e.g., {excludeTypes: ['thread']})
    // @param {Array<string>} params.includeTypes object types to exclusively return deltas for (e.g., {includeTypes: ['thread']})
    // @param {boolean} params.expanded boolean to specify wether to request the expanded view
    function DeltaStream(createRequest, connection, cursor, params) {
        if (params === void 0) { params = {}; }
        var _this = _super.call(this) || this;
        _this.restartBackoff = backoff_1.default.exponential({
            randomisationFactor: 0.5,
            initialDelay: 250,
            maxDelay: 30000,
            factor: 4,
        });
        _this.createRequest = createRequest;
        _this.connection = connection;
        _this.cursor = cursor;
        _this.params = params;
        if (!(_this.connection instanceof nylas_connection_1.default)) {
            throw new Error('Connection object not provided');
        }
        _this.restartBackoff.failAfter(DeltaStream.MAX_RESTART_RETRIES);
        _this.restartBackoff
            .on('backoff', _this._restartConnection.bind(_this))
            .on('fail', function () {
            return _this.emit('error', "Nylas DeltaStream failed to reconnect after\n          " + DeltaStream.MAX_RESTART_RETRIES + "\n          retries.");
        });
        return _this;
    }
    DeltaStream.prototype.close = function () {
        clearTimeout(this.timeoutId);
        delete this.timeoutId;
        this.restartBackoff.reset();
        if (this.request) {
            this.request.abort();
        }
        delete this.request;
    };
    DeltaStream.prototype.open = function () {
        var _this = this;
        this.close();
        var path = '/delta/streaming';
        var _a = this.params, _b = _a.excludeTypes, excludeTypes = _b === void 0 ? [] : _b, _c = _a.includeTypes, includeTypes = _c === void 0 ? [] : _c, params = __rest(_a, ["excludeTypes", "includeTypes"]);
        var queryObj = __assign(__assign({}, params), { cursor: this.cursor });
        if (excludeTypes.length > 0) {
            queryObj.exclude_types = excludeTypes.join(',');
        }
        if (includeTypes.length > 0) {
            queryObj.include_types = includeTypes.join(',');
        }
        var reqOpts = this.connection.requestOptions({
            method: 'GET',
            path: path,
            qs: queryObj,
        });
        return (this.request = this.createRequest(reqOpts)
            .on('response', function (response) {
            if (response.statusCode !== 200) {
                response.on('data', function (data) {
                    var err = data;
                    try {
                        err = JSON.parse(err);
                    }
                    catch (e) { }
                    // Do nothing, keep err as string.
                    return _this._onError(err);
                });
                return;
            }
            // Successfully established connection
            _this.emit('response', response);
            _this._onDataReceived();
            return (response
                .on('data', _this._onDataReceived.bind(_this))
                // Each data block received may not be a complete JSON object. Pipe through
                // JSONStream.parse(), which handles converting data blocks to JSON objects.
                .pipe(JSONStream_1.default.parse())
                .on('data', function (obj) {
                if (obj.cursor) {
                    _this.cursor = obj.cursor;
                }
                return _this.emit('delta', obj);
            }));
        })
            .on('error', this._onError.bind(this)));
    };
    DeltaStream.prototype._onDataReceived = function (data) {
        // Nylas sends a newline heartbeat in the raw data stream once every 5 seconds.
        // Automatically restart the connection if we haven't gotten any data in
        // Delta.streamingTimeoutMs. The connection will restart with the last
        // received cursor.
        clearTimeout(this.timeoutId);
        this.restartBackoff.reset();
        this.timeoutId = setTimeout(this.restartBackoff.backoff.bind(this.restartBackoff), Delta.streamingTimeoutMs);
    };
    DeltaStream.prototype._onError = function (err) {
        this.emit('error', err);
        return this.restartBackoff.reset();
    };
    DeltaStream.prototype._restartConnection = function (n) {
        this.emit('info', "Restarting Nylas DeltaStream connection (attempt " + (n + 1) + "): " + (this.request != null ? this.request.href : undefined));
        this.close();
        return this.open();
    };
    // Max number of times to retry a connection if we receive no data heartbeats
    // from the Nylas server.
    DeltaStream.MAX_RESTART_RETRIES = 5;
    return DeltaStream;
}(events_1.EventEmitter));
